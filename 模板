

dfs.



n-皇后：
优化版：
#include <iostream>
#include <algorithm>
using namespace std;
typedef pair<int ,int > PII;
typedef long long ll;

const int N = 20;
const int MOD = 1e9+7;
bool  col[N],dg[N],udg[N];
char s[N][N];
int n,x,m,y,z,k,f,l,r,t;
void dfs(int r){
    if(r>n||t==n){
        if(t==n){
            for (int i = 1; i <= n;i++){
                for (int j = 1; j <= n;j++){
                    printf("%c", s[i][j]);
                }
                puts("");
            }
            puts("");
        }
        return;
    }
    for (int i = 1; i <= n;i++){
        if(!col[i]&&!dg[i+r]&&!udg[r-i+10]){
            col[i]=dg[i+r]=udg[r-i+10]=true;
            t++;
            s[r][i] = 'Q';
            dfs(r + 1);
            col[i] = dg[i + r] = udg[r - i + 10] = false;
            t--;
            s[r][i] = '.';
        }
    }
}
int main(){
    cin>>n;
    for (int i = 1; i <= n;i++){
        for (int j = 1; j <= n;j++){
            s[i][j] = '.';
        }
    }
    dfs(1);
    return 0;
}
=================================================================================================================================================================================================
#include <iostream>
#include <algorithm>
using namespace std;
typedef pair<int ,int > PII;
typedef long long ll;

const int N = 20;
const int MOD = 1e9+7;
bool  col[N],dg[N],udg[N],row[N];
char s[N][N];
int n,x,m,y,z,k,f,l,r,t;
void dfs(int i,int j,int t){
    if(j>n){
        i ++;
        j = 1;
    }
    if(i>n){
        if(t==n){
            for (int i = 1; i <= n;i++){
                for (int j = 1; j <= n;j++){
                    printf("%c", s[i][j]);
                }
                puts("");
            }
            puts("");
        }
        return;
    }
    if(!col[j]&&!row[i]&&!dg[i+j]&&!udg[i-j+n]){
        col[j] = row[i] = dg[i + j] = udg[i - j + n] = true;
        s[i][j] = 'Q';
        dfs(i, j+1,t+1);
        col[j] = row[i] = dg[i + j] = udg[i - j + n] = false;
        s[i][j] = '.';
    }
    dfs(i, j + 1, t);
}
int main(){
    cin>>n;
    for (int i = 1; i <= n;i++){
        for (int j = 1; j <= n;j++){
            s[i][j] = '.';
        }
    }
    dfs(1,1,0);
    return 0;
}
=================================================================================================================================================================================================
2.走迷宫

#include <iostream>
#include <algorithm>
using namespace std;
typedef pair<int ,int > PII;
typedef long long ll;

const int N = 110;
const int MOD = 1e9+7;
int st[N][N];
int dx[] = {1, -1, 0, 0}, dy[] = {0, 0, 1, -1};
PII q[N*N];
int n,m,hh,tt=-1;
int dist[N][N];
void bfs(){
    q[++tt] = {1,1};
    st[1][1] =1;
    while (hh<=tt)
    {
        PII t = q[hh++];
        int a = t.first, b = t.second;
        for (int i = 0; i < 4;i++){
            int x =a+ dx[i], y =b+ dy[i];
            if(1<=x&&x<=n&&1<=y&&y<=m&&!st[x][y]){
                dist[x][y] = dist[a][b] + 1;
                st[x][y] = 1;
                q[++tt]={x, y};
                if(x==n&&y==m)
                    return;
            }
        }
    }
}
int main(){
    cin>>n>>m;
    for (int i = 1; i <= n;i++){
        for (int j = 1; j <= m;j++){
            cin>>st[i][j];
        }
    }
    bfs();
    printf("%d", dist[n][m]);
    return 0;
}

=================================================================================================================================================================================================




